w <- (100 - w)/100 # controls percentage of missing (set percentage of non-missing desired)
if( q == "MCAR" ){
for (u in 1:np){
for (v in 1:ni){
rini <- runif(1)
if (rini > w){ #compare the random value with the probability
bin[u, v] <- 1 #assign as "missing" if this random value is greater than the probability.
}else{
bin[u, v] <- 0 #assign as "observed" otherwise
}
}
}
}
if (q == "MAR"){
# add MAR mechanism here
}
miss.dat <- comp.dat[,1:4]
miss.dat[which(bin[,1] == 1), 1] <- -99
miss.dat[which(bin[,2] == 1), 2] <- -99
miss.dat[which(bin[,3] == 1), 3] <- -99
miss.dat[which(bin[,4] == 1), 4] <- -99
final.dat <- cbind(miss.dat, comp.dat)
return(final.dat)
}
# define sample sizes
ss <- c("150", "800") # sample size condition loop: ss = 150, 300, 800, 1600, 5000
# define separation
sep <- c("mod", "vpoor", "poor", "mod", "high") # separation condition loop: very poor, poor, moderate, high
# define missing mechanism
miss.mech <- c("MCAR") # missing conditions: MAR, MCAR
# define missing percentage
miss.perc <- c("5", "10" , "15", "20", "25")
# define missing data handling methods
methds <- c("fd", "ld", "fi") # missing handling method: fd (full data), ld (listwise delete), fi (full-info ML), mi (multiple imp.), 2m (2step MI), fb (fully Bayesian)
# define repetitions
reps <- 5
# define collection structure
# level 0 collecion (across classes)
df0 <- data.frame("c1" = rep(NA, reps),
"c2" = rep(NA, reps),
"c3" = rep(NA, reps))
# level 1 collection (across output variables)
df1 <- list(    int = df0,
intse = df0,
slop = df0,
slopse = df0,
vint = df0,
vintse = df0,
vslop = df0,
vslopse = df0)
df2 <- data.frame(wrnings = rep(NA,reps))
# level 2 collection (across missing handling methods)
resultlist <- list("fd" = df1,
"ld" = df1,
"fi" = df1)
# level 3 collection (across missing percentage)
resultlist2 <- list("miss5perc" = resultlist,
"miss10perc" = resultlist,
"miss15perc" = resultlist,
"miss20perc" = resultlist,
"miss25perc" = resultlist)
# level 4 collection (across missing mechanism)
resultlist3 <- list("MCAR" = resultlist2)#,
#missMAR = resultlist2)
#level 5 collection (across separation)
resultlist4 <- list("vpoor" = resultlist3,
"poor" = resultlist3,
"mod" = resultlist3,
"high" = resultlist3)
#level 6 collection (across sample size)
resultlist5 <- list("150" = resultlist4,
"800" = resultlist4)
for (r in 1:reps) {
# read in mplus data generation syntax
gensyntax <- readLines(paste0(loc,'1_datagen\\datagen.inp'))
gensyntax[5] <- paste0("SEED = ", r + seed, ";") # seed number
#  s <- "800"
# sample size condition loop: ss = 150, 300, 800, 1600, 5000
for (s in ss){
gensyntax[3] = paste0('NOBSERVATIONS = ', s, ';')
# separation condition loop: very poor, poor, moderate, high
for (p in sep){
#      p = "mod"
if (p == "vpoor"){
gensyntax[33] <- "[i*42.530](i3);"
gensyntax[57] <- "[i*42.530](i3);"
}
if (p == "poor"){
gensyntax[33] <- "[i*39.790](i3);"
gensyntax[57] <- "[i*39.790](i3);"
}
if (p == "mod"){
gensyntax[33] <- "[i*38.558](i3);"
gensyntax[57] <- "[i*38.558](i3);"
}
if (p == "high"){
gensyntax[33] <- "[i*37.6](i3);"
gensyntax[57] <- "[i*37.6](i3);"
}
gensyntax[6] = "SAVE = generated_data.txt;"
filename = paste0(loc,'1_datagen\\datagen.inp' )
write(gensyntax, file = filename)
runModels(paste0(loc,'1_datagen'), recursive=FALSE, logFile = NULL)
# create missing data -----------------------------------------------------
# 2 factors at this step:
## 1) missing mechanism
## 2) percentage of missing
# missing conditions: MAR, MCAR
for (q in miss.mech) {
#        q = "MCAR"
# missing percentages: 5, 10 ,1, 20, 25
for ( w in miss.perc) {
#          w = "5"
data.complete <- read.table(paste0(loc,'1_datagen\\generated_data.txt' ))
mechanism.test <- q
miss.percentage <- w
temp.dat <- miss.fun(data.complete, q, miss.percentage)
write.table(temp.dat, file = paste0(loc, "2_analysis\\generated_data_miss.txt"))
# analyze -----------------------------------------------------------------
# 1 factor at this step:
## 1) missing handling method: LD (listwise delete), FI (full-info ML), MI (multiple imp.), 2M (2step MI), FB (fully Bayesian)
for( m in methds) {
#          m = "fd"
if (m == "fd") {
# read in mplus data analysis syntax and modify for full-data analysis
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "!LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1m-y4m y1-y4 c;"
}
if (m == "ld") {
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1-y4 y1m-y4m c;"
}
if (m == "fi") {
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "!LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1m-y4m y1-y4 c;"
}
if (m == "mi") {
}
if (m == "2m") {
}
if (m == "fb") {
}
filename = paste0(loc,'2_analysis\\', mplus.filename, '.inp' )
write(analsyntax, file = filename)
runModels(filename, recursive = FALSE, logFile = NULL)
extract.pars <- readModels(paste0(loc,'2_analysis\\', mplus.filename, '.out'))
extract.pars <- extract.pars[["parameters"]]
#############################
# ALL INTERCEPT INFORMATION #
#############################
# s = sample size, p = separation, q = missing mechanism, w = missing percentage, m = method
# extract intercept means
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["int"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "I" , 3]
# extract intercept SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["intse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "I" , 4]
# extract intercept variance
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vint"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "I" , 3]
# extract intercept variance SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vintse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "I" , 4]
#############################
# ALL SLOPE INFORMATION #
#############################
# extract slope means
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["slop"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "S" , 3]
# extract slope SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["slopse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "S" , 4]
# extract slope variance
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vslop"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "S" , 3]
# extract slope variance SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vslopse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "S" , 4]
}
}
}
}
}
}
?write.table
#r = 1
for (r in 1:reps) {
# read in mplus data generation syntax
gensyntax <- readLines(paste0(loc,'1_datagen\\datagen.inp'))
gensyntax[5] <- paste0("SEED = ", r + seed, ";") # seed number
#  s <- "800"
# sample size condition loop: ss = 150, 300, 800, 1600, 5000
for (s in ss){
gensyntax[3] = paste0('NOBSERVATIONS = ', s, ';')
# separation condition loop: very poor, poor, moderate, high
for (p in sep){
#      p = "mod"
if (p == "vpoor"){
gensyntax[33] <- "[i*42.530](i3);"
gensyntax[57] <- "[i*42.530](i3);"
}
if (p == "poor"){
gensyntax[33] <- "[i*39.790](i3);"
gensyntax[57] <- "[i*39.790](i3);"
}
if (p == "mod"){
gensyntax[33] <- "[i*38.558](i3);"
gensyntax[57] <- "[i*38.558](i3);"
}
if (p == "high"){
gensyntax[33] <- "[i*37.6](i3);"
gensyntax[57] <- "[i*37.6](i3);"
}
gensyntax[6] = "SAVE = generated_data.txt;"
filename = paste0(loc,'1_datagen\\datagen.inp' )
write(gensyntax, file = filename)
runModels(paste0(loc,'1_datagen'), recursive=FALSE, logFile = NULL)
# create missing data -----------------------------------------------------
# 2 factors at this step:
## 1) missing mechanism
## 2) percentage of missing
# missing conditions: MAR, MCAR
for (q in miss.mech) {
#        q = "MCAR"
# missing percentages: 5, 10 ,1, 20, 25
for ( w in miss.perc) {
#          w = "5"
data.complete <- read.table(paste0(loc,'1_datagen\\generated_data.txt' ))
mechanism.test <- q
miss.percentage <- w
temp.dat <- miss.fun(data.complete, q, miss.percentage)
write.table(temp.dat, file = paste0(loc, "2_analysis\\generated_data_miss.txt"), col.names = FALSE, row.names = FALSE)
# analyze -----------------------------------------------------------------
# 1 factor at this step:
## 1) missing handling method: LD (listwise delete), FI (full-info ML), MI (multiple imp.), 2M (2step MI), FB (fully Bayesian)
for( m in methds) {
#          m = "fd"
if (m == "fd") {
# read in mplus data analysis syntax and modify for full-data analysis
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "!LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1m-y4m y1-y4 c;"
}
if (m == "ld") {
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1-y4 y1m-y4m c;"
}
if (m == "fi") {
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "!LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1m-y4m y1-y4 c;"
}
if (m == "mi") {
}
if (m == "2m") {
}
if (m == "fb") {
}
filename = paste0(loc,'2_analysis\\', mplus.filename, '.inp' )
write(analsyntax, file = filename)
runModels(filename, recursive = FALSE, logFile = NULL)
extract.pars <- readModels(paste0(loc,'2_analysis\\', mplus.filename, '.out'))
extract.pars <- extract.pars[["parameters"]]
#############################
# ALL INTERCEPT INFORMATION #
#############################
# s = sample size, p = separation, q = missing mechanism, w = missing percentage, m = method
# extract intercept means
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["int"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "I" , 3]
# extract intercept SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["intse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "I" , 4]
# extract intercept variance
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vint"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "I" , 3]
# extract intercept variance SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vintse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "I" , 4]
#############################
# ALL SLOPE INFORMATION #
#############################
# extract slope means
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["slop"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "S" , 3]
# extract slope SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["slopse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "S" , 4]
# extract slope variance
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vslop"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "S" , 3]
# extract slope variance SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vslopse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "S" , 4]
}
}
}
}
}
}
# define sample sizes
ss <- c("150", "800") # sample size condition loop: ss = 150, 300, 800, 1600, 5000
# define separation
sep <- c("mod", "vpoor", "poor", "mod", "high") # separation condition loop: very poor, poor, moderate, high
# define missing mechanism
miss.mech <- c("MCAR") # missing conditions: MAR, MCAR
# define missing percentage
miss.perc <- c("5", "10" , "15", "20", "25")
# define missing data handling methods
methds <- c("fd", "ld", "fi") # missing handling method: fd (full data), ld (listwise delete), fi (full-info ML), mi (multiple imp.), 2m (2step MI), fb (fully Bayesian)
# define repetitions
reps <- 5
# define collection structure
# level 0 collecion (across classes)
df0 <- data.frame("c1" = rep(NA, reps),
"c2" = rep(NA, reps),
"c3" = rep(NA, reps))
# level 1 collection (across output variables)
df1 <- list(    int = df0,
intse = df0,
slop = df0,
slopse = df0,
vint = df0,
vintse = df0,
vslop = df0,
vslopse = df0)
df2 <- data.frame(wrnings = rep(NA,reps))
# level 2 collection (across missing handling methods)
resultlist <- list("fd" = df1,
"ld" = df1,
"fi" = df1)
# level 3 collection (across missing percentage)
resultlist2 <- list("miss5perc" = resultlist,
"miss10perc" = resultlist,
"miss15perc" = resultlist,
"miss20perc" = resultlist,
"miss25perc" = resultlist)
# level 4 collection (across missing mechanism)
resultlist3 <- list("MCAR" = resultlist2)#,
#missMAR = resultlist2)
#level 5 collection (across separation)
resultlist4 <- list("vpoor" = resultlist3,
"poor" = resultlist3,
"mod" = resultlist3,
"high" = resultlist3)
#level 6 collection (across sample size)
resultlist5 <- list("150" = resultlist4,
"800" = resultlist4)
# LOOP START --------------------------------------------------------------
#r = 1
for (r in 1:reps) {
# read in mplus data generation syntax
gensyntax <- readLines(paste0(loc,'1_datagen\\datagen.inp'))
gensyntax[5] <- paste0("SEED = ", r + seed, ";") # seed number
#  s <- "800"
# sample size condition loop: ss = 150, 300, 800, 1600, 5000
for (s in ss){
gensyntax[3] = paste0('NOBSERVATIONS = ', s, ';')
# separation condition loop: very poor, poor, moderate, high
for (p in sep){
#      p = "mod"
if (p == "vpoor"){
gensyntax[33] <- "[i*42.530](i3);"
gensyntax[57] <- "[i*42.530](i3);"
}
if (p == "poor"){
gensyntax[33] <- "[i*39.790](i3);"
gensyntax[57] <- "[i*39.790](i3);"
}
if (p == "mod"){
gensyntax[33] <- "[i*38.558](i3);"
gensyntax[57] <- "[i*38.558](i3);"
}
if (p == "high"){
gensyntax[33] <- "[i*37.6](i3);"
gensyntax[57] <- "[i*37.6](i3);"
}
gensyntax[6] = "SAVE = generated_data.txt;"
filename = paste0(loc,'1_datagen\\datagen.inp' )
write(gensyntax, file = filename)
runModels(paste0(loc,'1_datagen\\datagen.inp'), recursive=FALSE, logFile = NULL)
# create missing data -----------------------------------------------------
# 2 factors at this step:
## 1) missing mechanism
## 2) percentage of missing
# missing conditions: MAR, MCAR
for (q in miss.mech) {
#        q = "MCAR"
# missing percentages: 5, 10 ,1, 20, 25
for ( w in miss.perc) {
#          w = "5"
data.complete <- read.table(paste0(loc,'1_datagen\\generated_data.txt' ))
mechanism.test <- q
miss.percentage <- w
temp.dat <- miss.fun(data.complete, q, miss.percentage)
write.table(temp.dat, file = paste0(loc, "2_analysis\\generated_data_miss.txt"), col.names = FALSE, row.names = FALSE)
# analyze -----------------------------------------------------------------
# 1 factor at this step:
## 1) missing handling method: LD (listwise delete), FI (full-info ML), MI (multiple imp.), 2M (2step MI), FB (fully Bayesian)
for( m in methds) {
#          m = "fd"
if (m == "fd") {
# read in mplus data analysis syntax and modify for full-data analysis
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "!LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1m-y4m y1-y4 c;"
}
if (m == "ld") {
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1-y4 y1m-y4m c;"
}
if (m == "fi") {
mplus.filename <- "fd_ld_fi"
analsyntax <- readLines(paste0(loc,'2_analysis\\', mplus.filename, '.inp'))
analsyntax[4] <- "!LISTWISE = ON;"
analsyntax[6] <- "VARIABLE: NAMES ARE y1m-y4m y1-y4 c;"
}
if (m == "mi") {
}
if (m == "2m") {
}
if (m == "fb") {
}
filename = paste0(loc,'2_analysis\\', mplus.filename, '.inp' )
write(analsyntax, file = filename)
runModels(filename, recursive = FALSE, logFile = NULL)
extract.pars <- readModels(paste0(loc,'2_analysis\\', mplus.filename, '.out'))
extract.pars <- extract.pars[["parameters"]]
#############################
# ALL INTERCEPT INFORMATION #
#############################
# s = sample size, p = separation, q = missing mechanism, w = missing percentage, m = method
# extract intercept means
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["int"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "I" , 3]
# extract intercept SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["intse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "I" , 4]
# extract intercept variance
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vint"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "I" , 3]
# extract intercept variance SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vintse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "I" , 4]
#############################
# ALL SLOPE INFORMATION #
#############################
# extract slope means
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["slop"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "S" , 3]
# extract slope SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["slopse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Means"
&extract.pars$unstandardized[ , "param"] == "S" , 4]
# extract slope variance
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vslop"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "S" , 3]
# extract slope variance SE
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]][["vslopse"]][r, ] <-
extract.pars$unstandardized[ extract.pars$unstandardized[ , "paramHeader"] == "Variances"
&extract.pars$unstandardized[ , "param"] == "S" , 4]
}
}
}
}
}
}
s = "150"
p = "mod"
s = "150"
p = "mod"
q = "MCAR"
w = "20"
m = "fi"
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]]
m = "fd"
resultlist5[[s]][[p]][[q]][[paste0("miss", w, "perc")]][[m]]
